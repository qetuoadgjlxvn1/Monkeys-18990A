{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# AI Classification Competition Element IDs\nclass GameElements:\n    MOBILE_GOAL = 0\n    RED_RING = 1\n    BLUE_RING = 2\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT10)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\nSlides_motor_a = Motor(Ports.PORT7, GearSetting.RATIO_36_1, True)\nSlides_motor_b = Motor(Ports.PORT8, GearSetting.RATIO_36_1, False)\nSlides = MotorGroup(Slides_motor_a, Slides_motor_b)\nClamp = DigitalOut(brain.three_wire_port.a)\ncontroller_1 = Controller(PRIMARY)\nIntake = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\nConveyor = Motor(Ports.PORT6, GearSetting.RATIO_6_1, True)\n# AI Vision Color Descriptions\n# AI Vision Code Descriptions\nvision_front = AiVision(Ports.PORT21, AiVision.ALL_AIOBJS)\ngps_9 = Gps(Ports.PORT9, -177.80, -50.80, MM, -90)\n# AI Vision Color Descriptions\n# AI Vision Code Descriptions\nvision_back = AiVision(Ports.PORT11, AiVision.ALL_AIOBJS)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_right_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # stop the motors if the brain is calibrating\n            if drivetrain_inertial.is_calibrating():\n                left_drive_smart.stop()\n                right_drive_smart.stop()\n                while drivetrain_inertial.is_calibrating():\n                    sleep(25, MSEC)\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonR1/buttonR2 status\n            # to control Slides\n            if controller_1.buttonR1.pressing():\n                Slides.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                Slides.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                Slides.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n#focus the robot to an object. obj_name: 'ring' or 'stake'\ndef focus_object(obj_name):\n    #Reduce turn speed to prevent over turn\n    drivetrain.set_turn_velocity(5,PERCENT)\n        \n    while True:\n\n        #Take snapshot and define the name of object\n        if obj_name == 'stake':\n            ai_objects = vision_back.take_snapshot(vision_back.ALL_AIOBJS)\n            object_id =  GameElements.MOBILE_GOAL \n        elif obj_name == 'ring': \n            '''ai_objects = vision_front.take_snapshot(vision_front.ALL_AIOBJS)\n            object_id =  GameElements.RED_RING '''\n            return\n        else:\n        \n            return\n        if ai_objects[0].exists == True:\n            if ai_objects[0].centerX < 150:\n                drivetrain.turn(LEFT)\n            elif ai_objects[0].centerX > 190:\n                drivetrain.turn(RIGHT)\n            else:\n                drivetrain.stop()\n                drivetrain.set_turn_velocity(30,PERCENT)\n                return\n        else:\n            drivetrain.set_turn_velocity(30,PERCENT)\n            return\n        wait(2, MSEC)\n    \ndef when_started1():\n    drivetrain.set_drive_velocity(70, PERCENT)\n    drivetrain.set_turn_velocity(30, PERCENT)\n    drivetrain.set_stopping(BRAKE)\n    Intake.set_velocity(60, PERCENT)\n    Conveyor.set_velocity(90, PERCENT)\n    Slides.set_velocity(70, PERCENT)\n    Slides.set_stopping(BRAKE)\n\n\ndef onauton_autonomous_0():\n\n    #Score on the first left corner\n    Slides.spin_for(FORWARD,230,DEGREES)\n    Conveyor.spin(FORWARD)\n    wait(350,MSEC)\n    Conveyor.stop()\n    Slides.spin_for(REVERSE,230,DEGREES)\n\n    #move to position with dynamic speed: the closer to the target, the slower the robot, with min speed of 20%\n    while gps_9.x_position(MM)<(-1175):\n        distance = abs(-1175 - gps_9.x_position(MM))\n        speed = max(min(distance, 600)/6,20)\n        drivetrain.set_drive_velocity(speed, PERCENT)\n        drivetrain.drive(FORWARD)\n        wait(2,MSEC)\n    drivetrain.stop()\n    drivetrain.turn_to_heading(90,DEGREES)\n    focus_object('stake')\n    while gps_9.y_position(MM)<(600):\n        distance = abs(600 - gps_9.y_position(MM))\n        speed = max(min(distance, 600)/6,20)\n        drivetrain.set_drive_velocity(speed, PERCENT)\n        drivetrain.drive(REVERSE)\n        wait(2,MSEC)\n    drivetrain.stop()\n    Clamp.set(True)\n    drivetrain.turn_to_heading(0,DEGREES)\n    focus_object('ring')\n    Intake.spin(FORWARD)\n    Conveyor.spin(FORWARD)\n    while gps_9.x_position(MM)<-600:\n        drivetrain.drive(FORWARD)\n    drivetrain.stop()\n    '''drivetrain.turn_to_heading(90,DEGREES)\n    focus_object('ring')\n    while gps_9.y_position(MM)>1200:\n        drivetrain.drive(FORWARD)\n    drivetrain.stop()\n    drivetrain.turn_to_heading(26.5,DEGREES)\n    focus_object('ring')\n    while gps_9.x_position(MM)<0:\n        drivetrain.drive(FORWARD)\n    drivetrain.stop()\n    drivetrain.turn_to_heading(180,DEGREES)\n    while gps_9.x_position(MM)>-1200:\n        drivetrain.drive(FORWARD)\n    drivetrain.stop()\n    drivetrain.turn_to_heading(270,DEGREES)\n    while gps_9.y_position<-1200:\n        drivetrain.drive(FORWARD)\n    drivetrain.stop()\n    drivetrainturn_to_heading(180,DEGREES)\n    while gps_9.x_position>-1500:\n        drivetrain.drive(FORWARD)\n    drivetrain.stop()\n    drivetrain.turn_to_heading(296.5,DEGREES)\n    while gps_9.y_position(MM)>-1500:\n        drivetrain.drive(REVERSE)'''\n\n\ndef ondriver_drivercontrol_0():\n    while True:\n        if controller_1.buttonLeft.pressing():\n            Clamp.set(True)\n        elif controller_1.buttonA.pressing():\n            Clamp.set(False)\n        else:\n            pass\n        if controller_1.buttonY.pressing():\n            Slides.spin_for(FORWARD, 1100, DEGREES)\n        elif controller_1.buttonRight.pressing():\n            Slides.spin_for(FORWARD, 220, DEGREES)\n        else:\n            pass\n        if controller_1.buttonL1.pressing():\n            Intake.spin(FORWARD)\n            Conveyor.spin(FORWARD)\n        elif controller_1.buttonL2.pressing():\n            Intake.spin(REVERSE)\n            Conveyor.spin(REVERSE)\n        else:\n            Intake.stop()\n            Conveyor.stop()\n        wait(5, MSEC)\n        if controller_1.buttonX.pressing():\n            brain.screen.print(\"start focus\")\n            focus_object(stake)\n            brain.screen.next_row()\n            brain.screen.print(\"focused\")\n            wait(5,MSEC)\n            \n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread(onauton_autonomous_0)\n    # wait for the driver control period to end\n    while(competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread(ondriver_drivercontrol_0)\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n\n# register the competition functions\ncompetition = Competition(vexcode_driver_function, vexcode_auton_function)\n\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[1,2,3,4,10],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"-7","xOffsetUnit":"in","yOffset":"-2","yOffsetUnit":"in","thetaOffset":"-90"},"triportSourcePort":null},{"port":[7,8],"name":"Slides","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[1],"name":"Clamp","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"Slides","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[5],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[6],"name":"Conveyor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[21],"name":"vision_front","customName":true,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[],\"codes\":[],\"tags\":false,\"AIObjects\":true,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"aiModelDropDownValue\":\"2024-2025 High Stakes\"}","isConfigured":"false"},"triportSourcePort":22},{"port":[9],"name":"gps_9","customName":true,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"-7","xOffsetUnit":"in","yOffset":"-2","yOffsetUnit":"in","thetaOffset":"-90"},"triportSourcePort":22},{"port":[11],"name":"vision_back","customName":true,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[],\"codes\":[],\"tags\":false,\"AIObjects\":true,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"AIModelMetadata\":{\"id\":0,\"version\":1,\"name\":\"Classroom Objects\"},\"aiModelDropDownValue\":\"2024-2025 High Stakes\"}","isConfigured":"false"},"triportSourcePort":22}],"slot":4,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}